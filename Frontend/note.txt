Note de l'avancement du projet: 

HOMEPAGE: 
La homepage est entierment coder avec les bonnes pratiques du Green Code, les data pour les features
sont placer dans un fichier expres pour. 
Concernant la structure elle est identique a celle du code de base (optimisation avec ajout header),
par contre ordre des titres sur ma version non conventionelle car sur la version d'origine il 
y a une utilisation des titres avec la classe "sr-only". Donc voir si il faut adapter ces titre ou 
remplacer le h3 par un h1 (sur ma version). 
localisation du header fonctionnel.


Sign In page: 
Le formulaire a était decomposer de la maniere suivante: 
- Composant Field effectuer (il contient la div qui enferme label et input)
- Composant Remember effectuer (car il va surement utiliser des fonction et un state, isoler pour + propre)
- Composant Button effectuer
Le Formulaire a etait aussi fait en composant "Form" car je pense que par la suite il va recevoir beaucoup
de reglage donc c'est plus propre de l'isoler. 
A noter que peut etre il a trop etait decomposer, on verra si a la fin des éléments n'avait pas neccesairement 
besoin d'etre fait en composant on réajustera et on les fera dans le dure directement dans la page Sign In. 

User page: 
Cette est securisé par le composant PrivateRoute qui nous permet l'acces a cette page uniquement si le token est 
present dans le store.
Pour le form lors de l'edit du username il faudra faire un composant a par, voir aussi avec les classe css present
et gerer sont state pour que lors du Onclick soit il se diplay none soit il se display flex. 
J'ai fabriquer un composant Account dans lequelle j'ai import mon composant Button,
plus tard il recevras surement la fonction Onclick, Puis j'ai fait un composant Allaccounts dans 
lequelle j'ai impoter Account et j'ai mapper ma data avec. Je pense que ces composants vont devoir 
etre retoucher lors du state managment. 

Formulaire: 
Le formulaire est operationnel il permet la connexion a la base de donnée, lors de l'entré du username et su mot de passe
le token est recupéré, stocker dans le local storage. A partir de la il est recuperer du local storage et mis dans le store 
de redux avec un chemin inchangeable (meme structure apres refresh) pour faciliter la recuperation
de celui ci. 
Pour la redirection, la page User est proteger par la possesion du token en localstorage. Lors de l'envoi du form, la fonction 
redirection attent 1s avant de se mettre en route, pour attendre l'arriver du token dans le localstorage (sa evite les bug de 
redirection alors que le token n'est pas present dans le localstorage). 
 
boutton de connexion : 
Le composant ConnectButton recupere le token present dans le store, des conditions dans la JSX sont faite pour que si le token 
est present, dans le header Sign Out est afficher et si il n'est pas present c'est Sign in qui est afficher. Une fonction est aussi
faite pour que lors du clique sur Sign Out le token est delete du local storage ce qui l'enlevera automatiquement du store. 

UserInHeader: 
NOUVELLE ACTION fabriquer "GET_USER", elle permet de recuperer les profil data de l'utilisateur qui se connect. Elle se met en route
lors de la redirection (setTimeout) un fois que le formulaire a etait soumis et qu'on a recu le token.
Dans le reducer "SINGN_IN" et "GET_USER" sont structer de façon a avoir un body qui contient deux objet : user et token. La structure du 
initiale state est pareil pour que lors du refresh le path ne change pas. Le store reste hydrater avec le local storage. 
SINON pour l'affichage du firstname dans le header un composant a etait fait (UserInHeader), celui ci recuper cette donnée du store
pour l'afficher dans le JSX. 
CSS arranger pour un resulat plus propre.

Composant User: 
Meme principe que pour UserInHeader, comme l'action GET_USER est deja faite il faut juste apeller les data dans le composant.
ATTENTION a mettre la condition si user est true, sinon les data sont recuperer avant qu'elles ne soient presentes dans le store et sa crash. 
Voir comment on peut assembler first name et lastName car il sont dans deux element different. 


algorythme:


pour le changement de username:
Les deux input qu'on ne peut pas modifier ne pas leurs mettre de onChange sa risque 
de marcher tout seul. 


Note depuis dernier commit: 
changement nom function UsersProfile par UserInHeader/ UserInHeader optimiser pour afficher userName/ Composant Username optimiser dans la page 
user pour afficher le userName

A faire pour demain 13/09/2024 : 
Reprendre le form edit user et le faire fonctionner 

Ensuite le remember me (session storage). 
 



- se renseigner est ce que c'est mieux de mettre les classes directement dans le composant ? res =>
    tout depend, si le composant est reutiliser avec un style qui peut etre modifier alors il faut passer
    le style en props sinon on peut le laisser dans le composant générique. 
- finir form pour change username
